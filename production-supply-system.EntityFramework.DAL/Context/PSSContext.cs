// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Microsoft.EntityFrameworkCore;
using production_supply_system.EntityFramework.DAL.Models.Configurations;
using production_supply_system.EntityFramework.DAL.Models.CustomsSchema;
using production_supply_system.EntityFramework.DAL.Models.dboSchema;
using production_supply_system.EntityFramework.DAL.Models.DocmapperSchema;
using production_supply_system.EntityFramework.DAL.Models.InboundSchema;
using production_supply_system.EntityFramework.DAL.Models.MasterSchema;
using production_supply_system.EntityFramework.DAL.Models.PartscontrolSchema;
using production_supply_system.EntityFramework.DAL.Models.PlanningSchema;
using production_supply_system.EntityFramework.DAL.Models.UsersSchema;
using System;
using System.Collections.Generic;
#nullable enable

namespace production_supply_system.EntityFramework.DAL.Context;

public partial class PSSContext : DbContext
{
    public PSSContext()
    {
    }

    public PSSContext(DbContextOptions<PSSContext> options)
        : base(options)
    {
    }

    public virtual DbSet<BoundVin> BoundVins { get; set; }

    public virtual DbSet<Carrier> Carriers { get; set; }

    public virtual DbSet<Case> Cases { get; set; }

    public virtual DbSet<ContainersInLot> ContainersInLots { get; set; }

    public virtual DbSet<CustomsClearance> CustomsClearances { get; set; }

    public virtual DbSet<CustomsPart> CustomsParts { get; set; }

    public virtual DbSet<Docmapper> Docmappers { get; set; }

    public virtual DbSet<DocmapperColumn> DocmapperColumns { get; set; }

    public virtual DbSet<DocmapperContent> DocmapperContents { get; set; }

    public virtual DbSet<ImoCargo> ImoCargos { get; set; }

    public virtual DbSet<Invoice> Invoices { get; set; }

    public virtual DbSet<Location> Locations { get; set; }

    public virtual DbSet<Log> Logs { get; set; }

    public virtual DbSet<Lot> Lots { get; set; }

    public virtual DbSet<PartsInContainer> PartsInContainers { get; set; }

    public virtual DbSet<PartsInInvoice> PartsInInvoices { get; set; }

    public virtual DbSet<PlannedSequence> PlannedSequences { get; set; }

    public virtual DbSet<Process> Processes { get; set; }

    public virtual DbSet<ProcessesStep> ProcessesSteps { get; set; }

    public virtual DbSet<PurchaseOrder> PurchaseOrders { get; set; }

    public virtual DbSet<Section> Sections { get; set; }

    public virtual DbSet<Shipper> Shippers { get; set; }

    public virtual DbSet<StatusesForSfsUpload> StatusesForSfsUploads { get; set; }

    public virtual DbSet<TermsOfContainerUse> TermsOfContainerUses { get; set; }

    public virtual DbSet<TermsOfDelivery> TermsOfDeliveries { get; set; }

    public virtual DbSet<Tracing> Tracings { get; set; }

    public virtual DbSet<Transport> Transports { get; set; }

    public virtual DbSet<TypesOfContainer> TypesOfContainers { get; set; }

    public virtual DbSet<TypesOfLocation> TypesOfLocations { get; set; }

    public virtual DbSet<TypesOfOrder> TypesOfOrders { get; set; }

    public virtual DbSet<TypesOfPacking> TypesOfPackings { get; set; }

    public virtual DbSet<TypesOfPart> TypesOfParts { get; set; }

    public virtual DbSet<TypesOfTransport> TypesOfTransports { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<VinNumbersLocal> VinNumbersLocals { get; set; }

    public virtual DbSet<VinsInContainer> VinsInContainers { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=RU-NMGR-S0053;Initial Catalog=PSS;Integrated Security=True;Encrypt=False");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.ApplyConfiguration(new Models.Configurations.BoundVinConfiguration());
        modelBuilder.ApplyConfiguration(new Models.Configurations.CaseConfiguration());
        modelBuilder.ApplyConfiguration(new Models.Configurations.ContainersInLotConfiguration());
        modelBuilder.ApplyConfiguration(new Models.Configurations.CustomsClearanceConfiguration());
        modelBuilder.ApplyConfiguration(new Models.Configurations.CustomsPartConfiguration());
        modelBuilder.ApplyConfiguration(new Models.Configurations.DocmapperConfiguration());
        modelBuilder.ApplyConfiguration(new Models.Configurations.DocmapperContentConfiguration());
        modelBuilder.ApplyConfiguration(new Models.Configurations.InvoiceConfiguration());
        modelBuilder.ApplyConfiguration(new Models.Configurations.LocationConfiguration());
        modelBuilder.ApplyConfiguration(new Models.Configurations.LotConfiguration());
        modelBuilder.ApplyConfiguration(new Models.Configurations.PartsInContainerConfiguration());
        modelBuilder.ApplyConfiguration(new Models.Configurations.PartsInInvoiceConfiguration());
        modelBuilder.ApplyConfiguration(new Models.Configurations.PlannedSequenceConfiguration());
        modelBuilder.ApplyConfiguration(new Models.Configurations.ProcessConfiguration());
        modelBuilder.ApplyConfiguration(new Models.Configurations.ProcessesStepConfiguration());
        modelBuilder.ApplyConfiguration(new Models.Configurations.PurchaseOrderConfiguration());
        modelBuilder.ApplyConfiguration(new Models.Configurations.SectionConfiguration());
        modelBuilder.ApplyConfiguration(new Models.Configurations.ShipperConfiguration());
        modelBuilder.ApplyConfiguration(new Models.Configurations.StatusesForSfsUploadConfiguration());
        modelBuilder.ApplyConfiguration(new Models.Configurations.TermsOfContainerUseConfiguration());
        modelBuilder.ApplyConfiguration(new Models.Configurations.TermsOfDeliveryConfiguration());
        modelBuilder.ApplyConfiguration(new Models.Configurations.TracingConfiguration());
        modelBuilder.ApplyConfiguration(new Models.Configurations.TypesOfPackingConfiguration());
        modelBuilder.ApplyConfiguration(new Models.Configurations.TypesOfPartConfiguration());
        modelBuilder.ApplyConfiguration(new Models.Configurations.TypesOfTransportConfiguration());
        modelBuilder.ApplyConfiguration(new Models.Configurations.UserConfiguration());
        modelBuilder.ApplyConfiguration(new Models.Configurations.VinsInContainerConfiguration());

        modelBuilder.HasSequence("PPSequence", "Planning").HasMin(1L);

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}
