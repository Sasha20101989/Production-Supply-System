// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using production_supply_system.EntityFramework.DAL.Models;
using production_supply_system.EntityFramework.DAL.Models.CustomsSchema;
using production_supply_system.EntityFramework.DAL.Models.dboSchema;
using production_supply_system.EntityFramework.DAL.Models.DocmapperSchema;
using production_supply_system.EntityFramework.DAL.Models.InboundSchema;
using production_supply_system.EntityFramework.DAL.Models.MasterSchema;
using production_supply_system.EntityFramework.DAL.Models.PartscontrolSchema;
using production_supply_system.EntityFramework.DAL.Models.PlanningSchema;
using production_supply_system.EntityFramework.DAL.Models.UsersSchema;
using System;
using System.Collections.Generic;

#nullable disable

namespace production_supply_system.EntityFramework.DAL.Models.Configurations
{
    public partial class LotConfiguration : IEntityTypeConfiguration<Lot>
    {
        public void Configure(EntityTypeBuilder<Lot> entity)
        {
            entity.HasOne(d => d.Carrier).WithMany(p => p.Lots)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tbd_Lots_tbd_Carriers");

            entity.HasOne(d => d.DeliveryTerms).WithMany(p => p.Lots)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tbd_Lots_tbd_Delivery_Terms");

            entity.HasOne(d => d.LotArrivalLocation).WithMany(p => p.LotLotArrivalLocations)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tbd_Lots_tbd_Locations1");

            entity.HasOne(d => d.LotCustomsLocation).WithMany(p => p.LotLotCustomsLocations).HasConstraintName("FK_tbd_Lots_tbd_Locations2");

            entity.HasOne(d => d.LotDepartureLocation).WithMany(p => p.LotLotDepartureLocations)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tbd_Lots_tbd_Locations");

            entity.HasOne(d => d.LotInvoice).WithMany(p => p.Lots)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tbd_Lots_tbd_Invoices");

            entity.HasOne(d => d.LotPurchaseOrder).WithMany(p => p.Lots)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tbd_Lots_tbd_PurchaseOrders");

            entity.HasOne(d => d.LotTransport).WithMany(p => p.Lots).HasConstraintName("FK_tbd_Lots_tbd_Transports");

            entity.HasOne(d => d.LotTransportType).WithMany(p => p.Lots)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tbd_Lots_tbd_Types_Of_Transport");

            entity.HasOne(d => d.Shipper).WithMany(p => p.Lots)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tbd_Lots_tbd_Shippers");

            OnConfigurePartial(entity);
        }

        partial void OnConfigurePartial(EntityTypeBuilder<Lot> entity);
    }
}
